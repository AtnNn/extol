include 'lib/trace.xtl'.
include 'lib/misc.xtl'.
include 'lib/parsing.xtl'.
include 'lib/streams.xtl'.
include 'lib/cpp.xtl'.
include 'lib/prolog.xtl'.
include 'lib/extol.xtl'.
include 'lib/extol-to-prolog.xtl'.

%% Main

prolog main :-
    catch((
                 current_prolog_flag(argv, [_, Command | Args]),
                 command(Command, Args),
                 halt
             ), Exception, (
              write('failed: '),
              write(Exception), nl,
              halt(1)
          )).

prolog command(test, Args) :-
    ( write('Running tests'), nl,
      test((Name :- Goals)),
      ([Name] = Args ; Args = []),
      write(Name), write('...'),
      once(run_test(Goals)),
      fail)
    ; true.

prolog command(extoltoprolog, [In, Out | Flags]) :-
    xtl_include(In, DeclsXTL), !,
    ( member('--slim', Flags),
      t('Slimming'),
      maplist(xtl_slim_declaration, DeclsXTL, DeclsSlim),
      append(DeclsSlim, DeclsXTLNew)
    ; DeclsXTL = DeclsXTLNew),
    t('converting to prolog...'),
    xtl_to_pl_toplevel(DeclsXTLNew, DeclsPL),
    t('writing output file...'),
    pl_write_top_level(DeclsPL, BytesGen, []), !,
    append("% Generated by extoltoprolog\n", BytesGen, BytesOut),
    write_file(Out, BytesOut).

pred command: ((repl, []): xtl_repl).

pred command: ((Command, _): write(unknown_command(Command)), false).

prolog run_test(done) :- !, write(success), nl.
prolog run_test((A, B)) :- !,
    (call(A)
     -> run_test(B)
     ; nl, write('  failed: '), write(A), nl, throw(test_failed)).
prolog run_test(B) :-
    run_test((B, done)).

pred xtl_repl:
    ((): write('Extol> '), flush_output, read_line(Line),
    ( Line = [0'\n]
    ; catch((
        xtl_expression(ExpV, Line, []),
        xtl_makevars(ExpV, Exp, Vars),
        
        xtl_to_pl_goal(Exp, ExpPL),
        call(ExpPL),
        repl_write_result(Vars)
      ), Exception, (
        write('failed: '), write(Exception), nl
      ))
    ; write(error), nl),
    !, xtl_repl),
    ((): write('end'), nl).

pred repl_write_result:
(([]): true),
(([(V-X) | Xs]): write(V), write(' = '), write(X), nl, repl_write_result(Xs)).