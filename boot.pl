% Generated by extol2prolog
:-op(999,fx,tc).
:-op(1200,fy,test).
:-discontiguous((test)/1).
:-discontiguous(type/1).
:-discontiguous(typed/1).
t(X):-write('trace: '),ti,writeq(X),nl.
t(X,A,A):-write('trace: '),ti,writeq(X),write(', at: '),pretty_init(A,C),write(C),nl,!.
pretty_init(A,C):-copy_term(A,AA),(length(B,32),append(B,_,AA);B=AA),!,prep_chars(B,Q,[]),length(Q,N),(N<10->append(Q,[60,101,111,102,62],QQ);QQ=Q),atom_codes(C,QQ).
prep_chars([])-->[].
prep_chars([X|Xs])-->prep_char(X),prep_chars(Xs).
prep_char(X)-->{var(X)},!,[60,63,62].
prep_char(10)-->!,[60,110,108,62].
prep_char(13)-->!,[60,99,114,62].
prep_char(9)-->!,[60,116,97,98,62].
prep_char(60)-->!,[60,108,116,62].
prep_char(X)-->{(\+integer(X);X<32;X>126),!,open_output_codes_stream(S),write(S,X),close_output_codes_stream(S,C)},[60],dcg_call(C),[62],!.
prep_char(X)-->[X].
tf(X):-t(X),fail.
tf(X,A,B):-tf(X,A,B),fail.
tc F:-undo(t(failed(F))),t(enter(F)),ticall(F),undo(t(redo(F))),t(exit(F)).
tc F-->undo(t(failed(F))),t(enter(F)),ticall(F),undo(t(redo(F))),t(exit(F)).
tc(F,X)-->undo(t(failed(F))),t(enter(F)),ticall(F,X),undo(t(redo(F))),t(exit(F)).
ti:-Pat=[124,32,46,32,46,32|Pat],g_read(tindent,I),II is I*2,length(L,II),append(L,_,Pat),atom_codes(S,L),write(S).
ticall(G):-g_read(tindent,I),II is I+1,g_assignb(tindent,II),call(G),g_assignb(tindent,I).
ticall(G,A,B):-g_read(tindent,I),II is I+1,g_assignb(tindent,II),dcg_call(G,A,B),g_assignb(tindent,I).
ticall(G,X,A,B):-g_read(tindent,I),II is I+1,g_assignb(tindent,II),G=..L,append(L,[X],LL),GX=..LL,dcg_call(GX,A,B),g_assignb(tindent,I).
undo(_).
undo(G):-call(G),fail.
undo(_,A,A).
undo(G,A,B):-call(G,A,B),fail.
type(callable(_)):-opaque.
type(stream(_)):-opaque.
type(byte(X)):-number(X).
type(list(T,X)):-maplist(T,X).
type(bytes(X)):-list(byte,X).
typed(read_bytes(+stream,-bytes)).
read_bytes(Stream,[]):-at_end_of_stream(Stream),!.
read_bytes(Stream,[X|Xs]):-get_byte(Stream,X),read_bytes(Stream,Xs).
typed(write_bytes(+stream,+bytes)).
write_bytes(_,[]).
write_bytes(Stream,[X|Xs]):-put_byte(Stream,X),write_bytes(Stream,Xs).
typed(read_file(+atom,-bytes)).
read_file(Path,Bytes):-open(Path,read,Stream,[type(binary),buffering(block)]),read_bytes(Stream,Bytes),close(Stream).
typed(write_file(+atom,+bytes)).
write_file(Path,Bytes):-open(Path,write,Stream,[type(binary),buffering(block)]),write_bytes(Stream,Bytes),close(Stream).
:-initialization(main).
main:-current_prolog_flag(argv,[_,Command|Args]),command(Command,Args).
typed(command(atom,list(atom))).
command(test,Args):-undo(halt),write('Running tests'),nl,(test Name:-Goals),([Name]=Args;Args=[]),write(Name),write(...),once(run_test(Goals)),fail.
command(extol2prolog,[In,Out]):-read_file(In,BytesIn),!,pl_top_level(Decls,BytesIn,[]),!,pl_write_top_level(Decls,BytesGen,[]),!,append([37,32,71,101,110,101,114,97,116,101,100,32,98,121,32,101,120,116,111,108,50,112,114,111,108,111,103,10],BytesGen,BytesOut),write_file(Out,BytesOut).
run_test(done):-!,write(success),nl.
run_test((A,B)):-!,call(A)->run_test(B);nl,write('  failed: '),write(A),nl.
run_test(B):-run_test((B,done)).
:-discontiguous((test)/1).
test'parse test.c':-read_file('test.c',Bytes),!,c_pp([],Tokens,Bytes,[]),!,c_top_level(_Decls,Tokens,[]).
typed(many(+predicate(T),-list(T),+bytes,-bytes)).
many(P,[X|Xs])-->call(P,X),many(P,Xs),!.
many(_,[])-->[].
typed(many1(+predicate(T),-list(T),+bytes,-bytes)).
many1(P,[X|Xs])-->call(P,X),!,many(P,Xs).
typed(eof(+bytes,-bytes)).
eof([],[]).
typed(peek(-bytes,+bytes,-bytes)).
peek(Rest,Rest,Rest).
typed(alpha(-byte,+bytes,-bytes)).
alpha(C)-->[C],{member(C,[97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90])}.
typed(digit(-byte,+bytes,-bytes)).
digit(D)-->[C],{member(C-D,[48-0,49-1,50-2,51-3,52-4,53-5,54-6,55-7,56-8,57-9])}.
typed(dcg_call(+sentence,+bytes,-bytes)).
dcg_call(Var)-->{var(Var),!,fail}.
dcg_call([])-->!,[].
dcg_call([X|Xs])-->!,[X],dcg_call(Xs).
dcg_call((A,B))-->!,dcg_call(A),dcg_call(B).
dcg_call((A;_))-->dcg_call(A).
dcg_call((_;B))-->!,dcg_call(B).
dcg_call({A})-->!,{call(A)}.
dcg_call(G,In,Rest):-!,call(G,In,Rest).
typed(require(+sentence,+bytes,-bytes)).
require(N,Xs,Rest):-dcg_call(N,Xs,Rest),!;pretty_init(Xs,C),throw(parse_failed(N,C)).
typed(try(+sentence,+bytes,-bytes)).
try(N,Xs,Rest):-catch(dcg_call(N,Xs,Rest),parse_failed(_,_),Failed=true),!,Failed=false.
typed(foldl(+predicate(T,U,V),?(T),+list(U),?(V))).
foldl(_,R,[],R).
foldl(F,Z,[X|Xs],RR):-call(F,Z,X,R),foldl(F,R,Xs,RR).
c_pp(Env,Tokens)-->c_pp_lines(Lines),eof,!,{c_pp_eval(Env,Lines,Tokens,[])}.
c_pp_lines([])-->eof,!.
c_pp_lines([Line|Lines])-->c_pp_line(Line),!,c_pp_lines(Lines).
c_pp_line([])-->c_pp_skipwhite,([10],!;eof),!.
c_pp_line([Token|Tokens])-->c_pp_skipwhite,!,c_pp_token(Token),!,c_pp_line(Tokens).
c_pp_skipwhite-->c_pp_white,!.
c_pp_skipwhite-->[].
c_pp_white-->[47,47],!,c_pp_line_comment_.
c_pp_white-->[47,42],!,c_pp_block_comment_,c_pp_skipwhite.
c_pp_white-->([32];[9];[13];[92,13,10];[92,10]),!,c_pp_skipwhite.
c_pp_line_comment_-->(peek([10|_]);eof),!.
c_pp_line_comment_-->c_pp_white,!,c_pp_line_comment_.
c_pp_line_comment_-->[_],!,c_pp_line_comment_.
c_pp_block_comment_-->[42,47],!.
c_pp_block_comment_-->[_],c_pp_block_comment_.
c_pp_token(Token)-->(c_pp_operator(Token);c_pp_symbol(Token);c_pp_integer(Token)),!.
c_pp_operator(operator(Token),Next,Rest):-member(Op,[[61],[35],[59]]),append(Op,Rest,Next),atom_codes(Token,Op).
c_pp_symbol(symbol(Name))-->c_pp_symbol_chars(Cs),{atom_codes(Name,Cs)}.
c_pp_symbol_chars([X|Xs])-->c_pp_symbol_first(X),!,many(c_pp_symbol_char,Xs).
c_pp_symbol_first(C)-->alpha(C),!.
c_pp_symbol_first(95)-->[95].
c_pp_symbol_char(C)-->c_pp_symbol_first(C);[C],{member(C,[48,49,50,51,52,53,54,55,56,57])}.
add_digit(N,D,R):-member(D,[0,1,2,3,4,5,6,7,8,9]),(var(N),N is R div D;true),R is N*10+D.
c_pp_integer(integer(N))-->many1(digit,Ds),!,{foldl(add_digit,0,Ds,N)}.
c_pp_eval(_,[])-->eof,!.
c_pp_eval(EnvA,[Line|Lines])-->c_pp_eval_line(EnvA,EnvB,Line),!,c_pp_eval(EnvB,Lines).
c_pp_eval_line(Env,[Name=Value|Env],[operator(#),symbol(define),symbol(Name)|Value])-->!.
c_pp_eval_line(Env,Env,[])-->!.
c_pp_eval_line(Env,Env,[symbol(X)|Xs])-->{member(X=Ys,Env),!,append(Ys,Xs,Zs)},c_pp_eval_line(Env,Env,Zs).
c_pp_eval_line(Env,Env,[X|Xs])-->[X],c_pp_eval_line(Env,Env,Xs).
c_top_level(Decls)-->many(c_declaration,Decls),eof.
c_declaration(declare(Name,Type,Value))-->c_type(Type),[symbol(Name)],([operator(=)],c_value(Assign),{Value=value(Assign)};{Value=none}),[operator(;)].
c_type(Type)-->[symbol(Type)].
c_value(variable(Name))-->[symbol(Name)].
c_value(integer(N))-->[integer(N)].
typed(pl_token(+sentence),+bytes,-bytes).
pl_token(N)-->dcg_call(N),pl_skipwhite,!.
test pl_token:-pl_token([120],[120,32,32],[]),pl_token([120],[120,32,37,32,99,111,109,109,101,110,116],[]),pl_token([120],[120,32,37,32,99,111,109,109,101,110,116,10,32,32,9],[]).
typed(pl_skipwhite(+bytes,-bytes)).
pl_skipwhite-->pl_white,!.
pl_skipwhite-->[].
test pl_skipwhite:-pl_skipwhite([],[]).
typed(pl_white(+bytes,-bytes)).
pl_white-->[37],!,pl_line_comment_,pl_skipwhite.
pl_white-->([32];[9];[13];[10]),!,pl_skipwhite.
test pl_white:-pl_white([32],[]),pl_white([37],[]),pl_white([37,32,99,111,109,109,101,110,116,32,10,9,32,32],[]).
pl_line_comment_-->([10];eof),!.
pl_line_comment_-->[_],pl_line_comment_.
typed(pl_top_level(-list(declaration),+bytes,-bytes)).
pl_top_level(Decls)-->([35,33],!,pl_line_comment_;true),pl_skipwhite,many(pl_declaration,Decls),require(eof).
typed(pl_write_top_level(+list(declaration),+bytes,-bytes)).
pl_write_top_level([])-->[].
pl_write_top_level([Decl|Decls])-->pl_write_term(Decl),[46,10],pl_write_top_level(Decls).
typed(pl_write_term(+term,+bytes,-bytes)).
pl_write_term(X)-->{open_output_codes_stream(Stream),write_term(Stream,X,[quoted(true),namevars(true)]),close_output_codes_stream(Stream,Bytes)},dcg_call(Bytes).
typed(pl_declaration(-declaration,+bytes,-bytes)).
pl_declaration(_)-->eof,!,{fail}.
pl_declaration(Decl)-->pl_expression(Decl),require(pl_token([46])).
typed(pl_atom_char(-byte,+bytes,-bytes)).
pl_atom_char(C)-->[C],!,{member(C,[97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,95,48,49,50,51,52,53,54,55,56,57])}.
typed(pl_atom(-atom,+bytes,-bytes)).
pl_atom(Atom)-->[39],pl_quoted_atom_chars_(Cs),{atom_codes(Atom,Cs)}.
pl_atom(AtomVar)-->many1(pl_atom_char,Cs),!,{atom_codes(Atom,Cs),(Cs=[C|_],member(C,[95,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90]),!,AtomVar=..['$VARNAME',Atom];AtomVar=Atom)}.
test pl_atom:-pl_atom(a,[39,97,39],[]),pl_atom(+,[39,43,39],[]),pl_atom('9',[39,92,57,39],[]),pl_atom(ab,[97,98],[]).
typed(pl_quoted_char(-byte,+bytes,-bytes)).
pl_quoted_char(C)-->[92],!,require([Quoted]),{member(Quoted:C,[110:10,114:13,116:9,101:127,AsIs:AsIs])},!.
typed(pl_quoted_atom_chars_(-list(bytes),+bytes,-bytes)).
pl_quoted_atom_chars_([])-->[39],!.
pl_quoted_atom_chars_([C|Cs])-->pl_quoted_char(C),!,pl_quoted_atom_chars_(Cs).
pl_quoted_atom_chars_([C|Cs])-->[C],pl_quoted_atom_chars_(Cs).
typed(pl_expression(-term,+bytes,-bytes)).
pl_expression(Expr)-->pl_expression(1201,Expr).
typed(pl_expression(+precedence,-term,+bytes,-bytes)).
pl_expression(Prec,Expr)-->pl_expression(none,Prec,Expr).
test pl_expression:-pl_expression(1,[49],[]),pl_expression(a,[97],[]),pl_expression(a+b,[97,32,43,32,98],[]),pl_expression(a+b*c,[97,32,43,32,98,32,42,32,99],[]),pl_expression(a*b+c,[97,32,42,32,98,32,43,32,99],[]),pl_expression(-a*b,[45,97,32,42,32,98],[]),pl_expression((:-a*b),[58,45,32,97,32,42,32,98],[]).
test comma_expr:-pl_expression((p:-a,b),[112,32,58,45,32,97,44,32,98],[]).
typed(pl_regular_term(-term,+bytes,-bytes)).
pl_regular_term(Char)-->[48,39],!,require(pl_string_char(Char)),pl_skipwhite.
pl_regular_term(Integer)-->many1(digit,Ds),!,{foldl(add_digit,0,Ds,Integer)},pl_skipwhite.
pl_regular_term(String)-->[34],!,require(many(pl_string_char,String)),require([34]),pl_skipwhite.
pl_regular_term(Term)-->pl_atom(Atom),!,(pl_token([40]),!,pl_comma_separated(Args,[],pl_token([41])),{Term=..[Atom|Args]};pl_skipwhite,{Term=Atom}).
pl_regular_term(Term)-->pl_token([40]),pl_expression(Term),require(pl_token([41])).
pl_regular_term({Term})-->pl_token([123]),pl_expression(Term),require(pl_token([125])).
pl_regular_term(Term)-->pl_token([91]),pl_comma_separated(Term,Tail,(pl_token([93]),{Tail=[]};pl_token([124]),pl_expression(Tail),pl_token([93]))),!.
typed(pl_string_char(-byte,+bytes,-bytes)).
pl_string_char(_)-->[34],!,{false}.
pl_string_char(C)-->pl_quoted_char(C),!.
pl_string_char(C)-->[C].
test pl_regular_term:-pl_regular_term(123,[49,50,51],[]),pl_regular_term(hi,[104,105],[]),pl_regular_term(hi(1),[104,105,40,49,41],[]),pl_regular_term(hi(b,4),[104,105,40,98,44,32,52,41],[]),pl_regular_term(6,[40,54,41],[]),pl_regular_term({x},[123,120,125],[]),pl_regular_term([],[91,93],[]),pl_regular_term([1,2,3],[91,49,44,50,44,51,93],[]).
typed(pl_comma_separated(-list(term),+list(term),+sentence,+bytes,-bytes)).
pl_comma_separated(As,Tail,End)-->pl_comma_seperated_first(As,Tail,End).
pl_comma_seperated_first(Tail,Tail,End)-->dcg_call(End),!.
pl_comma_seperated_first([A|As],Tail,End)-->pl_expression(1000,A),!,pl_comma_separated_next(As,Tail,End).
pl_comma_separated_next(Tail,Tail,End)-->dcg_call(End),!.
pl_comma_separated_next([A|As],Tail,End)-->require(pl_token([44])),!,pl_expression(1000,A),!,pl_comma_separated_next(As,Tail,End).
typed(pl_op_or_term(-term,-op_info,+bytes,-bytes)).
pl_op_or_term(!,term)-->[33],pl_skipwhite.
pl_op_or_term(X,Info)-->pl_regular_term(X),!,({pl_op(Prec,Assoc,X),Info=op(Prec,Assoc)};{Info=term}).
pl_op_or_term(X,Info)-->many1(pl_op_char,Cs),(pl_known_op(Cs,X,Prec,Assoc),{Info=op(Prec,Assoc)}),pl_skipwhite.
pl_known_op(Cs,Op,Prec,Assoc)-->{atom_codes(Op,Cs),pl_op(_,_,Op),!,pl_op(Prec,Assoc,Op)}.
pl_known_op(Cs,Op,Prec,Assoc)-->{append(Shorter,[C],Cs)},append([C]),pl_known_op(Shorter,Op,Prec,Assoc).
pl_op_char(C)-->[C],{member(C,[96,126,33,64,35,36,37,94,38,42,60,62,63,47,59,58,45,95,61,43,44,124,92,46])},!.
typed(pl_expression(+maybe(term),+precedence,-term,+bytes,-bytes)).
pl_expression(none,Prec,Term)-->pl_op_or_term(Op,op(OpPrec,Assoc)),{member(Assoc-N,[fx-0,fy-1]),RightPrec is OpPrec+N},try(pl_expression(none,RightPrec,Right)),{Combined=..[Op,Right]},pl_expression(just(Combined),Prec,Term).
pl_expression(none,Prec,Term)-->!,require(pl_op_or_term(Left,term)),pl_expression(just(Left),Prec,Term).
pl_expression(just(Left),Prec,Term)-->pl_op_or_term(Op,op(OpPrec,Assoc)),{member(Assoc-N,[xf-0,yf-1]),LeftPrec is OpPrec+N,LeftPrec<Prec,!,Combined=..[Op,Left]},pl_expression(just(Combined),Prec,Term).
pl_expression(just(Left),Prec,Term)-->pl_op_or_term(Op,op(OpPrec,Assoc)),{member(Assoc-N-M,[xfx-0-0,xfy-0-1,yfx-1-0]),LeftPrec is OpPrec+N,LeftPrec<Prec,!,RightPrec is OpPrec+M},require(pl_expression(none,RightPrec,Right)),{Combined=..[Op,Left,Right]},pl_expression(just(Combined),Prec,Term).
pl_expression(just(Term),_,Term)-->!.
typed(pl_op(-precedence,-associativity,-atom)).
pl_op(1200,xfx,:-).
pl_op(1200,xfx,-->).
pl_op(1200,fx,:-).
pl_op(1105,xfy,'|').
pl_op(1100,xfy,;).
pl_op(1050,xfy,->).
pl_op(1000,xfy,',').
pl_op(900,fy,\+).
pl_op(700,xfx,=).
pl_op(700,xfx,\=).
pl_op(700,xfx,=..).
pl_op(700,xfx,==).
pl_op(700,xfx,\==).
pl_op(700,xfx,is).
pl_op(700,xfx,<).
pl_op(700,xfx,>).
pl_op(700,xfx,=<).
pl_op(700,xfx,>=).
pl_op(700,xfx,=\=).
pl_op(600,xfy,:).
pl_op(500,yfx,+).
pl_op(500,yfx,-).
pl_op(400,yfx,*).
pl_op(400,yfx,/).
pl_op(400,yfx,rem).
pl_op(400,yfx,mod).
pl_op(400,yfx,div).
pl_op(400,yfx,<<).
pl_op(400,yfx,>>).
pl_op(200,xfx,**).
pl_op(200,xfx,^).
pl_op(200,fy,+).
pl_op(200,fy,-).
pl_op(1200,fy,test).
pl_op(999,fx,tc).
test parse_self:-read_file('main.xtl',Bytes),!,pl_top_level(_Decls,Bytes,[]).
test regression:-pl_declaration(Decl,[58,45,32,100,105,115,99,111,110,116,105,103,117,111,117,115,40,39,47,39,40,116,101,115,116,44,32,49,41,41,46],[]).
