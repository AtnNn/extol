% Generated by extoltoprolog
:-set_prolog_flag(singleton_warning,off).
:-op(999,fx,tc).
:-op(1200,fy,test).
:-discontiguous((test)/1).
:-discontiguous(type/1).
:-discontiguous(typed/1).
t(A):-write('trace: '),ti,writeq(A),nl.
t(A,B,B):-write('trace: '),ti,writeq(A),write(', at: '),pretty_init(B,C),write(C),nl,!.
pretty_init(A,B):-copy_term(A,C),(length(D,32),append(D,E,C);D=C),!,prep_chars(D,F,[]),length(F,G),(G<10->append(F,[60,101,111,102,62],H);H=F),atom_codes(B,H).
prep_chars([])-->[].
prep_chars([A|B])-->prep_char(A),prep_chars(B).
prep_char(A)-->{var(A)},!,[60,63,62].
prep_char(10)-->!,[60,110,108,62].
prep_char(13)-->!,[60,99,114,62].
prep_char(9)-->!,[60,116,97,98,62].
prep_char(60)-->!,[60,108,116,62].
prep_char(A)-->{(\+integer(A);A<32;A>126),!,open_output_codes_stream(B),write(B,A),close_output_codes_stream(B,C)},[60],dcg_call(C),[62],!.
prep_char(A)-->[A].
tf(A):-t(A),fail.
tf(A,B,C):-tf(A,B,C),fail.
tc A:-undo(t(failed(A))),t(enter(A)),ticall(A),undo(t(redo(A))),t(exit(A)).
tc A-->undo(t(failed(A))),t(enter(A)),ticall(A),undo(t(redo(A))),t(exit(A)).
tc(A,B)-->undo(t(failed(A))),t(enter(A)),ticall(A,B),undo(t(redo(A))),t(exit(A)).
ti:-A=[124,32,46,32,46,32|A],g_read(tindent,B),C is B*2,length(D,C),append(D,E,A),atom_codes(F,D),write(F).
ticall(A):-g_read(tindent,B),C is B+1,g_assignb(tindent,C),call(A),g_assignb(tindent,B).
ticall(A,B,C):-g_read(tindent,D),E is D+1,g_assignb(tindent,E),dcg_call(A,B,C),g_assignb(tindent,D).
ticall(A,B,C,D):-g_read(tindent,E),F is E+1,g_assignb(tindent,F),A=..G,append(G,[B],H),I=..H,dcg_call(I,C,D),g_assignb(tindent,E).
undo(A).
undo(A):-call(A),fail.
undo(A,B,B).
undo(A,B,C):-call(A,B,C),fail.
type(callable(A)):-opaque.
type(stream(A)):-opaque.
type(byte(A)):-number(A).
type(list(A,B)):-maplist(A,B).
type(bytes(A)):-list(byte,A).
typed(read_bytes(+stream,-bytes)).
read_bytes(A,[]):-at_end_of_stream(A),!.
read_bytes(A,[B|C]):-get_byte(A,B),read_bytes(A,C).
typed(write_bytes(+stream,+bytes)).
write_bytes(A,[]).
write_bytes(A,[B|C]):-put_byte(A,B),write_bytes(A,C).
typed(read_file(+atom,-bytes)).
read_file(A,B):-open(A,read,C,[type(binary),buffering(block)]),read_bytes(C,B),close(C).
typed(write_file(+atom,+bytes)).
write_file(A,B):-open(A,write,C,[type(binary),buffering(block)]),write_bytes(C,B),close(C).
:-initialization(main).
main:-current_prolog_flag(argv,[A,B|C]),command(B,C).
typed(command(atom,list(atom))).
command(test,A):-undo(halt),write('Running tests'),nl,(test B:-C),([B]=A;A=[]),write(B),write(...),once(run_test(C)),fail.
command(extoltoprolog,[A,B]):-read_file(A,C),!,xtl_top_level(D,C,[]),!,xtl_to_pl_toplevel(D,E),pl_write_top_level(E,F,[]),!,append([37,32,71,101,110,101,114,97,116,101,100,32,98,121,32,101,120,116,111,108,116,111,112,114,111,108,111,103,10],F,G),write_file(B,G).
run_test(done):-!,write(success),nl.
run_test((A,B)):-!,call(A)->run_test(B);nl,write('  failed: '),write(A),nl.
run_test(A):-run_test((A,done)).
:-discontiguous((test)/1).
test'parse test.c':-read_file('test.c',A),!,c_pp([],B,A,[]),!,c_top_level(C,B,[]).
typed(many(+predicate(A),-list(A),+bytes,-bytes)).
many(A,[B|C])-->call(A,B),many(A,C),!.
many(A,[])-->[].
typed(many1(+predicate(A),-list(A),+bytes,-bytes)).
many1(A,[B|C])-->call(A,B),!,many(A,C).
typed(eof(+bytes,-bytes)).
eof([],[]).
typed(peek(-bytes,+bytes,-bytes)).
peek(A,A,A).
typed(alpha(-byte,+bytes,-bytes)).
alpha(A)-->[A],{member(A,[97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90])}.
typed(digit(-byte,+bytes,-bytes)).
digit(A)-->[B],{member(B-A,[48-0,49-1,50-2,51-3,52-4,53-5,54-6,55-7,56-8,57-9])}.
typed(dcg_call(+sentence,+bytes,-bytes)).
dcg_call(A)-->{var(A),!,fail}.
dcg_call([])-->!,[].
dcg_call([A|B])-->!,[A],dcg_call(B).
dcg_call((A,B))-->!,dcg_call(A),dcg_call(B).
dcg_call((A;B))-->dcg_call(A).
dcg_call((A;B))-->!,dcg_call(B).
dcg_call({A})-->!,{call(A)}.
dcg_call(A,B,C):-!,call(A,B,C).
typed(require(+sentence,+bytes,-bytes)).
require(A,B,C):-dcg_call(A,B,C),!;pretty_init(B,D),throw(parse_failed(A,D)).
typed(try(+sentence,+bytes,-bytes)).
try(A,B,C):-catch(dcg_call(A,B,C),parse_failed(D,E),F=true),!,F=false.
typed(foldl(+predicate(A,B,C),?(A),+list(B),?(C))).
foldl(A,B,[],B).
foldl(A,B,[C|D],E):-call(A,B,C,F),foldl(A,F,D,E).
c_pp(A,B)-->c_pp_lines(C),eof,!,{c_pp_eval(A,C,B,[])}.
c_pp_lines([])-->eof,!.
c_pp_lines([A|B])-->c_pp_line(A),!,c_pp_lines(B).
c_pp_line([])-->c_pp_skipwhite,([10],!;eof),!.
c_pp_line([A|B])-->c_pp_skipwhite,!,c_pp_token(A),!,c_pp_line(B).
c_pp_skipwhite-->c_pp_white,!.
c_pp_skipwhite-->[].
c_pp_white-->[47,47],!,c_pp_line_comment_.
c_pp_white-->[47,42],!,c_pp_block_comment_,c_pp_skipwhite.
c_pp_white-->([32];[9];[13];[92,13,10];[92,10]),!,c_pp_skipwhite.
c_pp_line_comment_-->(peek([10|A]);eof),!.
c_pp_line_comment_-->c_pp_white,!,c_pp_line_comment_.
c_pp_line_comment_-->[A],!,c_pp_line_comment_.
c_pp_block_comment_-->[42,47],!.
c_pp_block_comment_-->[A],c_pp_block_comment_.
c_pp_token(A)-->(c_pp_operator(A);c_pp_symbol(A);c_pp_integer(A)),!.
c_pp_operator(operator(A),B,C):-member(D,[[61],[35],[59]]),append(D,C,B),atom_codes(A,D).
c_pp_symbol(symbol(A))-->c_pp_symbol_chars(B),{atom_codes(A,B)}.
c_pp_symbol_chars([A|B])-->c_pp_symbol_first(A),!,many(c_pp_symbol_char,B).
c_pp_symbol_first(A)-->alpha(A),!.
c_pp_symbol_first(95)-->[95].
c_pp_symbol_char(A)-->c_pp_symbol_first(A);[A],{member(A,[48,49,50,51,52,53,54,55,56,57])}.
add_digit(A,B,C):-member(B,[0,1,2,3,4,5,6,7,8,9]),(var(A),A is C div B;true),C is A*10+B.
c_pp_integer(integer(A))-->many1(digit,B),!,{foldl(add_digit,0,B,A)}.
c_pp_eval(A,[])-->eof,!.
c_pp_eval(A,[B|C])-->c_pp_eval_line(A,D,B),!,c_pp_eval(D,C).
c_pp_eval_line(A,[B=C|A],[operator(#),symbol(define),symbol(B)|C])-->!.
c_pp_eval_line(A,A,[])-->!.
c_pp_eval_line(A,A,[symbol(B)|C])-->{member(B=D,A),!,append(D,C,E)},c_pp_eval_line(A,A,E).
c_pp_eval_line(A,A,[B|C])-->[B],c_pp_eval_line(A,A,C).
c_top_level(A)-->many(c_declaration,A),eof.
c_declaration(declare(A,B,C))-->c_type(B),[symbol(A)],([operator(=)],c_value(D),{C=value(D)};{C=none}),[operator(;)].
c_type(A)-->[symbol(A)].
c_value(variable(A))-->[symbol(A)].
c_value(integer(A))-->[integer(A)].
pl_token(A)-->dcg_call(A),pl_skipwhite,!.
test pl_token:-pl_token([120],[120,32,32],[]),pl_token([120],[120,32,37,32,99,111,109,109,101,110,116],[]),pl_token([120],[120,32,37,32,99,111,109,109,101,110,116,10,32,32,9],[]).
pl_skipwhite-->pl_white,!.
pl_skipwhite-->[].
test pl_skipwhite:-pl_skipwhite([],[]).
pl_white-->[37],!,pl_line_comment_,pl_skipwhite.
pl_white-->([32];[9];[13];[10]),!,pl_skipwhite.
test pl_white:-pl_white([32],[]),pl_white([37],[]),pl_white([37,32,99,111,109,109,101,110,116,32,10,9,32,32],[]).
pl_line_comment_-->([10];eof),!.
pl_line_comment_-->[A],pl_line_comment_.
pl_top_level(A)-->([35,33],!,pl_line_comment_;{true}),pl_skipwhite,many(pl_declaration,A),require(eof).
pl_write_top_level([])-->[].
pl_write_top_level([A|B])-->pl_write_term(A),[46,10],pl_write_top_level(B).
pl_write_term(A)-->{open_output_codes_stream(B),write_term(B,A,[quoted(true),namevars(true),numbervars(true)]),close_output_codes_stream(B,C)},dcg_call(C).
pl_declaration(A)-->eof,!,{fail}.
pl_declaration(A)-->pl_expression(A),require(pl_token([46])).
pl_atom_char(A)-->[A],!,{member(A,[97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,95,48,49,50,51,52,53,54,55,56,57])}.
pl_atom(A)-->[39],pl_quoted_atom_chars_(B),{atom_codes(A,B)}.
pl_atom(A)-->many1(pl_atom_char,B),!,{atom_codes(C,B),(B=[D|E],member(D,[95,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90]),!,A=..['$VARNAME',C];A=C)}.
test pl_atom:-pl_atom(a,[39,97,39],[]),pl_atom(+,[39,43,39],[]),pl_atom('9',[39,92,57,39],[]),pl_atom(ab,[97,98],[]).
pl_quoted_char(A)-->[92],!,require([B]),{member(B:A,[110:10,114:13,116:9,101:127,C:C])},!.
pl_quoted_atom_chars_([])-->[39],!.
pl_quoted_atom_chars_([A|B])-->pl_quoted_char(A),!,pl_quoted_atom_chars_(B).
pl_quoted_atom_chars_([A|B])-->[A],pl_quoted_atom_chars_(B).
pl_expression(A)-->pl_expression(1201,A).
pl_expression(A,B)-->pl_expression(none,A,B).
test pl_expression:-pl_expression(1,[49],[]),pl_expression(a,[97],[]),pl_expression(a+b,[97,32,43,32,98],[]),pl_expression(a+b*c,[97,32,43,32,98,32,42,32,99],[]),pl_expression(a*b+c,[97,32,42,32,98,32,43,32,99],[]),pl_expression(-a*b,[45,97,32,42,32,98],[]),pl_expression((:-a*b),[58,45,32,97,32,42,32,98],[]).
test pl_comma_expr:-pl_expression((p:-a,b),[112,32,58,45,32,97,44,32,98],[]).
pl_regular_term(A)-->[48,39],!,require(pl_string_char(A)),pl_skipwhite.
pl_regular_term(A)-->many1(digit,B),!,{foldl(add_digit,0,B,A)},pl_skipwhite.
pl_regular_term(A)-->[34],!,require(many(pl_string_char,A)),require([34]),pl_skipwhite.
pl_regular_term(A)-->pl_atom(B),!,(pl_token([40]),!,pl_comma_separated(C,[],pl_token([41])),{A=..[B|C]};pl_skipwhite,{A=B}).
pl_regular_term(A)-->pl_token([40]),pl_expression(A),require(pl_token([41])).
pl_regular_term({A})-->pl_token([123]),pl_expression(A),require(pl_token([125])).
pl_regular_term(A)-->pl_token([91]),pl_comma_separated(A,B,(pl_token([93]),{B=[]};pl_token([124]),pl_expression(B),pl_token([93]))),!.
pl_string_char(A)-->[34],!,{false}.
pl_string_char(A)-->pl_quoted_char(A),!.
pl_string_char(A)-->[A].
test pl_regular_term:-pl_regular_term(123,[49,50,51],[]),pl_regular_term(hi,[104,105],[]),pl_regular_term(hi(1),[104,105,40,49,41],[]),pl_regular_term(hi(b,4),[104,105,40,98,44,32,52,41],[]),pl_regular_term(6,[40,54,41],[]),pl_regular_term({x},[123,120,125],[]),pl_regular_term([],[91,93],[]),pl_regular_term([1,2,3],[91,49,44,50,44,51,93],[]).
pl_comma_separated(A,B,C)-->pl_comma_seperated_first(A,B,C).
pl_comma_seperated_first(A,A,B)-->dcg_call(B),!.
pl_comma_seperated_first([A|B],C,D)-->pl_expression(1000,A),!,pl_comma_separated_next(B,C,D).
pl_comma_separated_next(A,A,B)-->dcg_call(B),!.
pl_comma_separated_next([A|B],C,D)-->require(pl_token([44])),!,pl_expression(1000,A),!,pl_comma_separated_next(B,C,D).
pl_op_or_term(!,term)-->[33],pl_skipwhite.
pl_op_or_term(A,B)-->pl_regular_term(A),!,({pl_op(C,D,A),B=op(C,D)};{B=term}).
pl_op_or_term(A,B)-->many1(pl_op_char,C),(pl_known_op(C,A,D,E),{B=op(D,E)}),pl_skipwhite.
pl_known_op(A,B,C,D)-->{atom_codes(B,A),pl_op(E,F,B),!,pl_op(C,D,B)}.
pl_known_op(A,B,C,D)-->{append(E,[F],A)},append([F]),pl_known_op(E,B,C,D).
pl_op_char(A)-->[A],{member(A,[96,126,33,64,35,36,37,94,38,42,60,62,63,47,59,58,45,95,61,43,44,124,92,46])},!.
pl_expression(none,A,B)-->pl_op_or_term(C,op(D,E)),{member(E-F,[fx-0,fy-1]),G is D+F},try(pl_expression(none,G,H)),{I=..[C,H]},pl_expression(just(I),A,B).
pl_expression(none,A,B)-->!,require(pl_op_or_term(C,term)),pl_expression(just(C),A,B).
pl_expression(just(A),B,C)-->pl_op_or_term(D,op(E,F)),{member(F-G,[xf-0,yf-1]),H is E+G,H<B,!,I=..[D,A]},pl_expression(just(I),B,C).
pl_expression(just(A),B,C)-->pl_op_or_term(D,op(E,F)),{member(F-G-H,[xfx-0-0,xfy-0-1,yfx-1-0]),I is E+G,I<B,!,J is E+H},require(pl_expression(none,J,K)),{L=..[D,A,K]},pl_expression(just(L),B,C).
pl_expression(just(A),B,A)-->!.
pl_op(1200,xfx,:-).
pl_op(1200,xfx,-->).
pl_op(1200,fx,:-).
pl_op(1105,xfy,'|').
pl_op(1100,xfy,;).
pl_op(1050,xfy,->).
pl_op(1000,xfy,',').
pl_op(900,fy,\+).
pl_op(700,xfx,=).
pl_op(700,xfx,\=).
pl_op(700,xfx,=..).
pl_op(700,xfx,==).
pl_op(700,xfx,\==).
pl_op(700,xfx,is).
pl_op(700,xfx,<).
pl_op(700,xfx,>).
pl_op(700,xfx,=<).
pl_op(700,xfx,>=).
pl_op(700,xfx,=\=).
pl_op(600,xfy,:).
pl_op(500,yfx,+).
pl_op(500,yfx,-).
pl_op(400,yfx,*).
pl_op(400,yfx,/).
pl_op(400,yfx,rem).
pl_op(400,yfx,mod).
pl_op(400,yfx,div).
pl_op(400,yfx,<<).
pl_op(400,yfx,>>).
pl_op(200,xfx,**).
pl_op(200,xfx,^).
pl_op(200,fy,+).
pl_op(200,fy,-).
typed(xtl_token(+sentence),+bytes,-bytes).
xtl_token(A)-->dcg_call(A),xtl_skipwhite,!.
test xtl_token:-xtl_token([120],[120,32,32],[]),xtl_token([120],[120,32,37,32,99,111,109,109,101,110,116],[]),xtl_token([120],[120,32,37,32,99,111,109,109,101,110,116,10,32,32,9],[]).
typed(xtl_skipwhite(+bytes,-bytes)).
xtl_skipwhite-->xtl_white,!.
xtl_skipwhite-->[].
test xtl_skipwhite:-xtl_skipwhite([],[]).
typed(xtl_white(+bytes,-bytes)).
xtl_white-->[37],!,xtl_line_comment_,xtl_skipwhite.
xtl_white-->([32];[9];[13];[10]),!,xtl_skipwhite.
test xtl_white:-xtl_white([32],[]),xtl_white([37],[]),xtl_white([37,32,99,111,109,109,101,110,116,32,10,9,32,32],[]).
xtl_line_comment_-->([10];eof),!.
xtl_line_comment_-->[A],xtl_line_comment_.
typed(xtl_top_level(-list(declaration),+bytes,-bytes)).
xtl_top_level(A)-->([35,33],!,xtl_line_comment_;{true}),xtl_skipwhite,many(xtl_declaration,A),require(eof).
typed(xtl_declaration(-declaration,+bytes,-bytes)).
xtl_declaration(A)-->eof,!,{fail}.
xtl_declaration(A)-->xtl_expression(B),{xtl_makevars(B,A,C)},require(xtl_token([46])).
xtl_makevars(A,B,C):-A=..['XTL$VARNAME','_'],!.
xtl_makevars(A,B,C):-A=..['XTL$VARNAME',D],!,member(D-B,C),!.
xtl_makevars(A,A,B):-atomic(A),!.
xtl_makevars([A|B],[C|D],E):-!,xtl_makevars(A,C,E),xtl_makevars(B,D,E).
xtl_makevars(A,B,C):-A=..D,!,xtl_makevars(D,E,C),B=..E.
test xtl_makevars:-A=..['XTL$VARNAME','A'],xtl_makevars(foo(A,A),foo(1,B),C),atomic(B),B=1.
typed(xtl_atom_char(-byte,+bytes,-bytes)).
xtl_atom_char(A)-->[A],!,{member(A,[97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,95,48,49,50,51,52,53,54,55,56,57])}.
typed(xtl_atom(-atom,+bytes,-bytes)).
xtl_atom(A)-->[39],xtl_quoted_atom_chars_(B),{atom_codes(A,B)}.
xtl_atom(A)-->many1(xtl_atom_char,B),!,{atom_codes(C,B),B=[D|E],(D=95,!,A=..['XTL$VARNAME','_'];member(D,[65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90]),!,A=..['XTL$VARNAME',C];A=C)}.
test xtl_atom:-xtl_atom(a,[39,97,39],[]),xtl_atom(+,[39,43,39],[]),xtl_atom('9',[39,92,57,39],[]),xtl_atom(ab,[97,98],[]).
typed(xtl_quoted_char(-byte,+bytes,-bytes)).
xtl_quoted_char(A)-->[92],!,require([B]),{member(B:A,[110:10,114:13,116:9,101:127,C:C])},!.
typed(xtl_quoted_atom_chars_(-list(bytes),+bytes,-bytes)).
xtl_quoted_atom_chars_([])-->[39],!.
xtl_quoted_atom_chars_([A|B])-->xtl_quoted_char(A),!,xtl_quoted_atom_chars_(B).
xtl_quoted_atom_chars_([A|B])-->[A],xtl_quoted_atom_chars_(B).
typed(xtl_expression(-term,+bytes,-bytes)).
xtl_expression(A)-->xtl_expression(1201,A).
typed(xtl_expression(+precedence,-term,+bytes,-bytes)).
xtl_expression(A,B)-->xtl_expression(none,A,B).
test xtl_expression:-xtl_expression(1,[49],[]),xtl_expression(a,[97],[]),xtl_expression(a+b,[97,32,43,32,98],[]),xtl_expression(a+b*c,[97,32,43,32,98,32,42,32,99],[]),xtl_expression(a*b+c,[97,32,42,32,98,32,43,32,99],[]),xtl_expression(-a*b,[45,97,32,42,32,98],[]),xtl_expression((:-a*b),[58,45,32,97,32,42,32,98],[]).
test comma_expr:-xtl_expression((p:-a,b),[112,32,58,45,32,97,44,32,98],[]).
typed(xtl_regular_term(-term,+bytes,-bytes)).
xtl_regular_term(A)-->[48,39],!,require(xtl_string_char(A)),xtl_skipwhite.
xtl_regular_term(A)-->many1(digit,B),!,{foldl(add_digit,0,B,A)},xtl_skipwhite.
xtl_regular_term(A)-->[34],!,require(many(xtl_string_char,A)),require([34]),xtl_skipwhite.
xtl_regular_term(A)-->xtl_atom(B),!,(xtl_token([40]),!,xtl_comma_separated(C,[],xtl_token([41])),{A=..[B|C]};xtl_skipwhite,{A=B}).
xtl_regular_term(A)-->xtl_token([40]),xtl_expression(A),require(xtl_token([41])).
xtl_regular_term({A})-->xtl_token([123]),xtl_expression(A),require(xtl_token([125])).
xtl_regular_term(A)-->xtl_token([91]),xtl_comma_separated(A,B,(xtl_token([93]),{B=[]};xtl_token([124]),xtl_expression(B),xtl_token([93]))),!.
typed(xtl_string_char(-byte,+bytes,-bytes)).
xtl_string_char(A)-->[34],!,{false}.
xtl_string_char(A)-->xtl_quoted_char(A),!.
xtl_string_char(A)-->[A].
test xtl_regular_term:-xtl_regular_term(123,[49,50,51],[]),xtl_regular_term(hi,[104,105],[]),xtl_regular_term(hi(1),[104,105,40,49,41],[]),xtl_regular_term(hi(b,4),[104,105,40,98,44,32,52,41],[]),xtl_regular_term(6,[40,54,41],[]),xtl_regular_term({x},[123,120,125],[]),xtl_regular_term([],[91,93],[]),xtl_regular_term([1,2,3],[91,49,44,50,44,51,93],[]).
typed(xtl_comma_separated(-list(term),+list(term),+sentence,+bytes,-bytes)).
xtl_comma_separated(A,B,C)-->xtl_comma_seperated_first(A,B,C).
xtl_comma_seperated_first(A,A,B)-->dcg_call(B),!.
xtl_comma_seperated_first([A|B],C,D)-->xtl_expression(1000,A),!,xtl_comma_separated_next(B,C,D).
xtl_comma_separated_next(A,A,B)-->dcg_call(B),!.
xtl_comma_separated_next([A|B],C,D)-->require(xtl_token([44])),!,xtl_expression(1000,A),!,xtl_comma_separated_next(B,C,D).
typed(xtl_op_or_term(-term,-op_info,+bytes,-bytes)).
xtl_op_or_term(!,term)-->[33],xtl_skipwhite.
xtl_op_or_term(A,B)-->xtl_regular_term(A),!,({xtl_op(C,D,A),B=op(C,D)};{B=term}).
xtl_op_or_term(A,B)-->many1(xtl_op_char,C),(xtl_known_op(C,A,D,E),{B=op(D,E)}),xtl_skipwhite.
xtl_known_op(A,B,C,D)-->{atom_codes(B,A),xtl_op(E,F,B),!,xtl_op(C,D,B)}.
xtl_known_op(A,B,C,D)-->{append(E,[F],A)},append([F]),xtl_known_op(E,B,C,D).
xtl_op_char(A)-->[A],{member(A,[96,126,33,64,35,36,37,94,38,42,60,62,63,47,59,58,45,95,61,43,44,124,92,46])},!.
typed(xtl_expression(+maybe(term),+precedence,-term,+bytes,-bytes)).
xtl_expression(none,A,B)-->xtl_op_or_term(C,op(D,E)),{member(E-F,[fx-0,fy-1]),G is D+F},try(xtl_expression(none,G,H)),{I=..[C,H]},xtl_expression(just(I),A,B).
xtl_expression(none,A,B)-->!,require(xtl_op_or_term(C,term)),xtl_expression(just(C),A,B).
xtl_expression(just(A),B,C)-->xtl_op_or_term(D,op(E,F)),{member(F-G,[xf-0,yf-1]),H is E+G,H<B,!,I=..[D,A]},xtl_expression(just(I),B,C).
xtl_expression(just(A),B,C)-->xtl_op_or_term(D,op(E,F)),{member(F-G-H,[xfx-0-0,xfy-0-1,yfx-1-0]),I is E+G,I<B,!,J is E+H},require(xtl_expression(none,J,K)),{L=..[D,A,K]},xtl_expression(just(L),B,C).
xtl_expression(just(A),B,A)-->!.
typed(xtl_op(-precedence,-associativity,-atom)).
xtl_op(1200,xfx,:-).
xtl_op(1200,xfx,-->).
xtl_op(1200,fx,:-).
xtl_op(1105,xfy,'|').
xtl_op(1100,xfy,;).
xtl_op(1050,xfy,->).
xtl_op(1000,xfy,',').
xtl_op(900,fy,\+).
xtl_op(700,xfx,=).
xtl_op(700,xfx,\=).
xtl_op(700,xfx,=..).
xtl_op(700,xfx,==).
xtl_op(700,xfx,\==).
xtl_op(700,xfx,is).
xtl_op(700,xfx,<).
xtl_op(700,xfx,>).
xtl_op(700,xfx,=<).
xtl_op(700,xfx,>=).
xtl_op(700,xfx,=\=).
xtl_op(600,xfy,:).
xtl_op(500,yfx,+).
xtl_op(500,yfx,-).
xtl_op(400,yfx,*).
xtl_op(400,yfx,/).
xtl_op(400,yfx,rem).
xtl_op(400,yfx,mod).
xtl_op(400,yfx,div).
xtl_op(400,yfx,<<).
xtl_op(400,yfx,>>).
xtl_op(200,xfx,**).
xtl_op(200,xfx,^).
xtl_op(200,fy,+).
xtl_op(200,fy,-).
xtl_op(1200,fy,test).
xtl_op(999,fx,tc).
test parse_self:-read_file('main.xtl',A),!,xtl_top_level(B,A,[]).
test regression:-xtl_declaration(A,[58,45,32,100,105,115,99,111,110,116,105,103,117,111,117,115,40,39,47,39,40,116,101,115,116,44,32,49,41,41,46],[]).
xtl_to_pl_toplevel(A,B):-maplist(xtl_to_pl_declaration,A,C),append([(:-set_prolog_flag(singleton_warning,off))],C,B).
xtl_to_pl_declaration((A:-B),(A:-B)):-!,numbervars(A-B).
xtl_to_pl_declaration((:-A),(:-A)):-!,numbervars(A).
xtl_to_pl_declaration((test A),(test A)):-!,numbervars(A).
xtl_to_pl_declaration(A,A):-!,numbervars(A).
xtl_to_pl_dcg((A,B),(C,D),E,F):-!,xtl_to_pl_dcg(A,C,E,G),xtl_to_pl_dcg(B,D,G,F).
xtl_to_pl_dcg((A;B),(C;D),E,F):-!,xtl_to_pl_dcg(A,C,E,F),xtl_to_pl_dcg(B,D,E,F).
xtl_to_pl_dcg(!,!,A,A):-!.
xtl_to_pl_dcg([],true,A,A):-!.
xtl_to_pl_dcg([A|B],append([A|B],C,D),D,C):-!.
xtl_to_pl_dcg({A},A,B,B):-!.
xtl_to_pl_dcg(A,B,C,D):-!,A=..E,append(E,[C,D],F),B=..F.
xtl_to_pl_dcg(A,B,C,D):-throw(error(xtl_to_pl_dcg,A)).
